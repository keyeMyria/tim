# Generated by Django 2.0.2 on 2018-02-16 13:55

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('observables', '0001_initial'),
        ('common', '0001_initial'),
        ('users', '0001_initial'),
        ('actors', '0002_auto_20180216_1326'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=250)),
                ('slug', models.SlugField(max_length=250, unique_for_date='created')),
                ('description', models.TextField(blank=True, null=True)),
                ('event_date', models.DateTimeField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('published', 'Published')], default='draft', max_length=10)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('confidence', models.CharField(choices=[('critical', 'critical'), ('high', 'high'), ('medium', 'medium'), ('low', 'low'), ('unknown', 'unknown')], default='unknown', max_length=10)),
                ('risk', models.CharField(choices=[('critical', 'critical'), ('high', 'high'), ('medium', 'medium'), ('low', 'low'), ('unknown', 'unknown')], default='unknown', max_length=10)),
                ('tlp', models.CharField(choices=[('red', 'red'), ('amber', 'amber'), ('green', 'green'), ('white', 'white')], default='red', max_length=10)),
                ('rateing', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('reference', models.CharField(blank=True, max_length=250, null=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_author', to='users.Account')),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='EventComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment_author', to='users.Account')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_comments', to='events.Event')),
            ],
            options={
                'ordering': ('created',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventDocument',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=25)),
                ('doc_type', models.CharField(max_length=25)),
                ('description', models.TextField(blank=True, null=True)),
                ('document', models.FileField(blank=True, null=True, upload_to='documents/events/')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_document', to='events.Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventObservable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observable', to='events.Event')),
                ('observable', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event', to='observables.Observable')),
            ],
        ),
        migrations.CreateModel(
            name='EventThreatActor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='threat_actor', to='events.Event')),
                ('threat_actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event', to='actors.ThreatActor')),
            ],
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=25)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='event_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ev_type', to='events.EventType'),
        ),
        migrations.AddField(
            model_name='event',
            name='motive',
            field=models.ManyToManyField(blank=True, related_name='event', to='common.Motive'),
        ),
        migrations.AddField(
            model_name='event',
            name='reporter',
            field=models.ManyToManyField(blank=True, related_name='event', to='common.Reporter'),
        ),
        migrations.AddField(
            model_name='event',
            name='sector',
            field=models.ManyToManyField(blank=True, related_name='event', to='common.Sector'),
        ),
        migrations.AddField(
            model_name='event',
            name='tag',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='event',
            name='targeted_organization',
            field=models.ManyToManyField(blank=True, to='actors.Organization'),
        ),
    ]
