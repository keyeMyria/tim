from django.shortcuts import render, get_object_or_404
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.views.generic import ListView
from django.views import generic
from django.core.mail import send_mail
from django.db.models import Count
from django.views.generic.edit import FormMixin
from taggit.models import Tag

from .models import Event, EventComment
from .forms import EmailPostForm, CommentForm, EventForm
import models
from users.models import User
from users.views import UserCanViewDataMixin

def event_list(request, tag_slug=None):
    object_list = Event.published.all()
    tag = None

    if tag_slug:
        tag = get_object_or_404(Tag, slug=tag_slug)
        object_list = object_list.filter(tag__in=[tag])

    paginator = Paginator(object_list, 3) # 3 posts in each page
    page = request.GET.get('page')
    try:
        events = paginator.page(page)
    except PageNotAnInteger:
        # If page is not an integer deliver the first page
        events = paginator.page(1)
    except EmptyPage:
        # If page is out of range deliver last page of results
        events = paginator.page(paginator.num_pages)
    return render(request, 'necti/event/list.html', {'page': page,
                                                   'events': events,
                                                   'tag': tag})


class EventListView(ListView):
    queryset = Event.published.all()
    context_object_name = 'events'
    paginate_by = 3
    template_name = 'necti/event/list.html'


#def event_detail(request, year, event):
#    model = models.Event
#    event = get_object_or_404(Event, slug=event,
#                                   status='published',
#                                   created__year=year)
#
#    # List of active comments for this post
#    comments = event.event_comments.filter(active=True)
#    if request.method == 'POST':
#        # A comment was posted
#        comment_form = CommentForm(data=request.POST)
#
#        if comment_form.is_valid():
#            # Create Comment object but don't save to database yet
#            new_comment = comment_form.save(commit=False)
#            # Assign the current event to the comment
#            #print help(new_comment)
#            new_comment.event = event
#            # Save the comment to the database
#            new_comment.save()
#    else:
#        comment_form = CommentForm()
#
#    # List of similar posts
#    event_tag_ids = event.tag.values_list('id', flat=True)
#    similar_events = Event.published.filter(tag__in=event_tag_ids).exclude(id=event.id)
#    similar_events = similar_events.annotate(same_tags=Count('tag')).order_by('-same_tags',
#                                                                             '-created')[:4]
#
#    return render(request, 'necti/event/detail.html', {'event': event ,
#                                                     'comments': comments,
#                                                     'comment_form': comment_form,
#                                                     'similar_events': similar_events})
#

class EventDetailView(FormMixin, UserCanViewDataMixin, generic.DetailView):
    model = Event
    template_name = 'necti/event/event_detail.html'
    form_class = CommentForm

    def get_success_url(self):
        return reverse('event_detail', kwargs={'pk': self.object.id})

    def get_context_data(self, **kwargs):
        context = super(EventDetailView, self).get_context_data(**kwargs)
        comment_form = CommentForm(initial={'post': self.object})
        slug = kwargs['object'].slug
        event = get_object_or_404(Event, slug=slug,
                                   status='published')

        comments = event.event_comments.filter(active=True) 

        event_tag_ids = event.tag.values_list('id', flat=True)
        similar_events = Event.published.filter(tag__in=event_tag_ids).exclude(id=event.id)
        similar_events = similar_events.annotate(same_tags=Count('tag')).order_by('-same_tags',
                                                                             '-created')[:4]

        print comment_form
        context = {'event': event, 
                   'comments': comments,
                   'comment_from': comment_form,
                   'similar_events': similar_events
                  }

        print context
        return context


    def post(self, request, *args, **kwargs):
        self.object = self.get_object()
        form = self.get_form()
        if form.is_valid():
            return self.form_valid(form)
        else:
            return self.form_invalid(form)

    def form_valid(self, form):
        form.save()
        return super(EventDetailView, self).form_valid(form)

#    def get_object(self, queryset=None):
#        object = super(EventDetailView, self).get_object()
#        user = self.request.user
#        comments = object.event_comments.filter(active=True)
#        print comments
#        if self.request.method == 'POST':
#            # A comment was posted
#            comment_form = CommentForm(data=request.POST)
#
#            if comment_form.is_valid():
#                # Create Comment object but don't save to database yet
#                new_comment = comment_form.save(commit=False)
#                # Assign the current event to the comment
#                new_comment.event = object
#                # Save the comment to the database
#                new_comment.save()
#        else:
#            comment_form = CommentForm()
#
#        if user.is_superuser:
#            print comments
#            print object
#            #return object
#            #return { 'object': object, 'comments':comments }
#            return render(self.request, 'necti/event/event_detail.html', {'object': object,
#                                                             'comments': comments,})
#                                                             #'comment_form': comment_form})
#                                                             #'similar_events': similar_events})
#
#        else:
#           org = user.account.organization
#           if org != object.account.organization:
#               raise PermissionDenied('Not allowed')
#           return object


def event_share(request, post_id):
    # Retrieve post by id
    event = get_object_or_404(Event, id=post_id, status='published')
    sent = False

    if request.method == 'POST':
        # Form was submitted
        form = EmailPostForm(request.POST)
        if form.is_valid():
            # Form fields passed validation
            cd = form.cleaned_data
            event_url = request.build_absolute_uri(event.get_absolute_url())
            subject = '{} ({}) recommends you reading "{}"'.format(cd['name'], cd['email'], event.title)
            message = 'Read "{}" at {}\n\n{}\'s comments: {}'.format(event.title, event_url, cd['name'], cd['comments'])
            send_mail(subject, message, 'admin@myblog.com', [cd['to']])
            sent = True
    else:
        form = EmailPostForm()
    return render(request, 'necti/event/share.html', {'event': event,
                                                    'form': form,
                                                    'sent': sent})
